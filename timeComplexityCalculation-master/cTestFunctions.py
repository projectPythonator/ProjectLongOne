import cBasicFunctionsBox

def test_Functions():
    """ test_Functions()
        this function will test all my functions from my function box
        pre nothing
        post prints out errors found
        return nothing"""
    #these are all the test lines i will be using.
    #will be updating as needed
    good_int_dec_one = 'int myVar1 = 9804;'
    good_int_dec_two = 'int myVar2 = 2; /* i i still work'
    good_int_dec_three = 'int myVar3 = 1; // i work'
    good_int_dec_four = 'stuff */int myVar4 = 2;'
    bad_int_dec_one = '//int wontWork = 3;'
    bad_int_dec_two = '/*int wontWorktwo = 23848034535;'
    bad_int_dec_three = 'int wontWorkthree = 303;*/'
    bad_int_dec_four = 'char wontWorkFour = \'a\';'
    good_char_dec_one = 'char myVarOne = \'a\';'
    good_char_dec_two =  'char myVarTwo = \'b\'; //this works'
    good_char_dec_three = 'char myVarThree =\'c\';/* this works too'
    good_char_dec_four = 'my Comment here*/ char myVarFour = \'d\';'
    bad_char_dec_one = '//char wontWork = \'a\';'
    bad_char_dec_two = '/*char wontWorktwo = \'b\';'
    bad_char_dec_three = 'char wontWorkthree = \'c\';*/'
    bad_char_dec_four = 'int wontWorkFour = 5;'
    good_float_dec_one = 'float myVarOne = 234.465;'
    good_float_dec_two =  'float myVarTwo = 34.6743; //this works'
    good_float_dec_three = 'float myVarThree = 344.567;/* this works too'
    good_float_dec_four = 'my Comment here*/ float myVarFour = 43.4343;'
    bad_float_dec_one = '//float wontWork = 5.5;'
    bad_float_dec_two = '/*float wontWorktwo = 3.3;'
    bad_float_dec_three = 'float wontWorkthree = 3.5;*/'
    bad_float_dec_four = 'char wontWorkFour = \'a\';'
    good_string_dec_one = 'string myVarTwo = \"hello\";'
    good_string_dec_two =  'string myVarTwo = \"world\"; //this works'
    good_string_dec_three = 'string myVarThree =\"testing\";/* this works too'
    good_string_dec_four = 'my Comment here*/ string myVarFour = \"letters\";'
    bad_string_dec_one = '//string wontWork = \"hey\";'
    bad_string_dec_two = '/*string wontWorktwo = \"there\";'
    bad_string_dec_three = 'string wontWorkthree = \"hahah\";*/'
    bad_string_dec_four = 'int wontWorkFour = 5;'
    good_for_stmt_one = 'for(int i = 0;i < num; i++){'
    good_for_stmt_two = 'for(int i = 0;i < num; i++){//this works'
    good_for_stmt_three = 'this works*/for(int i = 0;i < num; i++){'
    good_for_stmt_four = 'for(int i = 0;i < num; i++){/*this works'
    bad_for_stmt_one = '//for(int i = 0;i < num; i++){  (doesnt work)'
    bad_for_stmt_two = '(doesnt work)for(int i = 0;i < num; i++){ */'
    bad_for_stmt_three = '/*for(int i = 0;i < num; i++){ (doesnt work)'
    bad_for_stmt_four = 'if(works == false)'
    good_while_stmt_one = 'while(true){'
    good_while_stmt_two = 'while(true){//this works'
    good_while_stmt_three = 'this works*/while(true){'
    good_while_stmt_four = 'while(true){/*this works'
    bad_while_stmt_one = '//while(true){  (doesnt work)'
    bad_while_stmt_two = '(doesnt work)while(true){ */'
    bad_while_stmt_three = '/*while(true){ (doesnt work)'
    bad_while_stmt_four = 'for(int i = 3 ;i < myLimit;i++)'
    good_if_stmt_one = 'if(myVar == x){'
    good_if_stmt_two = 'if(myVar == x){//this works'
    good_if_stmt_three = 'this works*/if(myVar == x){'
    good_if_stmt_four = 'if(myVar == x){/*this works'
    bad_if_stmt_one = '//if(myVar == x){  (doesnt work)'
    bad_if_stmt_two = '(doesnt work)if(myVar == x){ */'
    bad_if_stmt_three = '/*if(myVar == x){ (doesnt work)'
    bad_if_stmt_four = 'while(iDontWork){'
    good_struct_dec_one = 'struct myThing{'
    good_struct_dec_two = 'struct myThing{//this works'
    good_struct_dec_three = 'this works*/struct myThing{'
    good_struct_dec_four = 'struct myThing{/*this works'
    bad_struct_dec_one = '//struct myThing{ (doesnt work)'
    bad_struct_dec_two = '(doesnt work)struct myThing{ */'
    bad_struct_dec_three = '/*struct myThing{ (doesnt work)'
    bad_struct_dec_four = 'class myclass '
    good_col_line_one = 'cout << \"hello world\"<< endl;'
    good_col_line_two = 'cout << \"hello world\"<< endl;//this works'
    good_col_line_three = 'this works*/cout << \"hello world\"<< endl;'
    good_col_line_four = 'cout << \"hello world\"<< endl;/*this works'
    bad_col_line_one = '//cout << \"hello world\"<< endl; (doesnt work)'
    bad_col_line_two = '(doesnt work)cout << \"hello world\"<< endl; */'
    bad_col_line_three = '/*cout << \"hello world\"<< endl; (doesnt work)'
    bad_col_line_four = 'int x = 23'
    good_brkt_open_one = '{'
    good_brkt_open_two = '{//this works'
    good_brkt_open_three = 'this works*/{'
    good_brkt_open_four = '{/*this works'
    bad_brkt_open_one = '//{ (doesnt work)'
    bad_brkt_open_two = '(doesnt work){ */'
    bad_brkt_open_three = '/*{ (doesnt work)'
    bad_brkt_open_four = ']'
    good_brkt_cls_one = '}'
    good_brkt_cls_two = '}//this works'
    good_brkt_cls_three = 'this works*/}'
    good_brkt_cls_four = '}/*this works'
    bad_brkt_cls_one = '// }(doesnt work)'
    bad_brkt_cls_two = '(doesnt work) }*/'
    bad_brkt_cls_three = '/* }(doesnt work)'
    bad_brkt_cls_four = '['
    good_func_head_one = 'void myFunction(int Num){'
    good_func_head_two = 'void myFunction(int Num){//this works'
    good_func_head_three = 'this works*/void myFunction(int Num){'
    good_func_head_four = 'void myFunction(int Num){/*this works'
    bad_func_head_one = '//void myFunction(int Num){ (doesnt work)'
    bad_func_head_two = '(doesnt work)void myFunction(int Num){ */'
    bad_func_head_three = '/*void myFunction(int Num){ (doesnt work)'
    bad_func_head_four = 'int x = 5'
    good_lib_inc_one = '#include <iostream>'
    good_lib_inc_two = '#include <iostream>//this works'
    good_lib_inc_three = 'this works*/#include <iostream>'
    good_lib_inc_four = '#include <iostream>/*this works'
    bad_lib_inc_one = '// #include <iostream> (doesnt work)'
    bad_lib_inc_two = '(doesnt work)#include <iostream> */'
    bad_lib_inc_three = '/* #include <iostream>(doesnt work)'
    bad_lib_inc_four = '#include sup sup sup;'


if __name__ == '__main__':
    test_Functions()
